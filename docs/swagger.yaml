openapi: 3.0.0
info:
  title: Author's Haven
  description: Author's Haven is a community of like minded authors to foster
    inspiration and innovation by leveraging the modern web Api on [https://ah-dahlia.herokuapp.com/](https://ah-dahlia-staging.herokuapp.com/)

  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
  version: 1.0.0

externalDocs:
  description: Checkout the GitHub repo
  url: https://github.com/andela/dahlia-ah-backend

servers:
- url: /api/v1
  description: Local host
- url: https://ah-dahlia-staging.herokuapp.com/api/v1
  description: Heroku Staging deployment
- url: https://ah-dahlia.herokuapp.com/api/v1
  description: Heroku Production deployment

tags:
- name: Users
  description: Operations available for user endpoints

security:
- ApiKeyAuth: []
paths:
  /users:
    post:
      tags:
        - Users
      summary: Creates a new user
      requestBody:
        description: fields containing user data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegisterInput'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRegisterInput'
        required: true
      responses:
        201:
          description: user created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        400:
          description: bad input parameter
          content:
            application/json:
              schema:
                type: object
                properties: 
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        field:
                          type: string
                          example: email
                        message:
                          type: string
                          example: the email address you supplied is invalid
        409:
          description: resource already exists
        500:
          description: internal server error 
  /novels:
    post:
      tags:
        - Novels
      summary: Creates a new novel
      requestBody:
        description: fields containing novel data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NovelInput'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NovelInput'
        required: true
      responses:
        201:
          description: novel created successfully
        401:
          description: Authentication failed
        409:
          description: resource already exists
        500:
          description: internal server error                  
  /users/login:
    post:
      tags:
        - Users
      summary: Login an existing user with email
      requestBody:
        description: fields containing user login data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginInput'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserLoginInput'
        required: true
      responses:
        200:
          description: user login successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        400:
          description: bad input parameter
        409:
          description: resource already exists
        500:
          description: internal server error
  /auth/forgotpassword:
    post:
      summary: Forgot password
      description: Sends an email to a user with the reset password link
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        200:
          description: succesful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardServerResponse'
        404:
          description: user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardServerResponse'
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardServerResponse'
      security:
      - bearerToken: []
components:
  schemas:
    User:
      required:
      - firstName
      - lastName
      - email
      - username
      type: object
      properties:
        firstName:
          type: string
          example: john
        lastName:
          type: string
          example: doe
        email:
          type: string
          example: johndoe@email.com
        username:
          type: string
          example: johnnydoe12
        bio:
          type: string
          example: I am awesome
        avatarURL:
          type: string
          example: https://your_avatar.com/your_avatar.jpg
        phoneNo:
          type: string
          example: 2347012345678
        address:
          type: string
          example: 123 Eve's Garden Road, Eden
    UserRegisterInput:
      required:
        - firstName
        - lastName
        - email
        - password
      type: object
      properties:
        firstName:
          type: string
          example: john
        lastName:
          type: string
          example: doe
        username:
          type: string
          example: johnnydoe12
        email:
          type: string
          example: johndoe@email.com
        password:
          type: string
          example: Flyplanex22
    UserLoginInput:
      properties:
        email:
          type: string
          example: johndoe@email.com
        password:
          type: string
          example: Flyplanex22
    NovelInput:
      required:
        - title
        - description
        - body
        - genre
      type: object
      properties:
        title:
          type: string
          example: Think Big
        description:
          type: string
          example: Learn how to think big
        body:
          type: string
          example: There are five steps to thinking big...
        genre:
          type: string
          example: Action
    AuthResponse:
      properties:
        token:
          type: string
        username:
          type: string
        bio:
          type: string
    ForgotPasswordUser:
      required:
      - email
      type: object
      properties:
        email:
          type: string
          example: example@gmail.com
    StandardServerResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: internal server error   
  securitySchemes:
    bearerToken:
      type: apiKey
      name: Authorization
      in: header
