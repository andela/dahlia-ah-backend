openapi: 3.0.0
info:
  title: Author's Haven
  description: Author's Haven is a community of like minded authors to foster
    inspiration and innovation by leveraging the modern web Api on [https://ah-dahlia.herokuapp.com/](https://ah-dahlia-staging.herokuapp.com/)

  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
  version: 1.0.0

externalDocs:
  description: Checkout the GitHub repo
  url: https://github.com/andela/dahlia-ah-backend

servers:
- url: /api/v1
  description: Local host
- url: https://ah-dahlia-staging.herokuapp.com/api/v1
  description: Heroku Staging deployment
- url: https://ah-dahlia.herokuapp.com/api/v1
  description: Heroku Production deployment

tags:
- name: Users
  description: Operations available for user endpoints
- name: Admin
  description: Operations available for Admin and Super-admin
- name: Auth
  description: Register and login operations

paths:
  /users:
    post:
      tags:
        - Admin
      summary: Super Admin endpoint for creating a new user.
      security:
      - ApiKeyAuth: []
      requestBody:
        description: fields containing user data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SuperAdminCreateInput'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SuperAdminCreateInput'
        required: true
      responses:
        201:
          description: user created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: unathorized
        403:
          description: Forbidden. Permission needed.
        409:
          description: resource already exists
        500:
          description: internal server error 
    
    get:
      tags:
        - Users
      summary: Gets all users
      responses:
        200:
          description: request successful
        401:
          description: Authentication failed
      security:
      - token: [] 
  
  /users/{userId}:
    get:
      tags:
        - Admin
      summary: Admin endpoint for fetching user by id
      description: Returns a single user
      parameters:
      - name: userId
        in: path
        description: ID of user to fetch
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/x-www-form-urlencoded:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: bad input parameter
          content:
            application/json:
              schema:
                type: object
                properties: 
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        field:
                          type: string
                          example: userId
                        message:
                          type: string
                          example: invalid request
        403:
          description: Forbidden. Permission needed.
        404:
          description: not found
        500:
          description: internal server error
    patch:
      tags:
        - Admin
      summary: Admin endpoint for updating a user by id
      description: Updates a single user
      parameters:
      - name: userId
        in: path
        description: ID of user to fetch
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
              schema:
                $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/x-www-form-urlencoded:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: bad input parameter
          content:
            application/json:
              schema:
                type: object
                properties: 
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        field:
                          type: string
                          example: userId
                        message:
                          type: string
                          example: invalid request
        403:
          description: Forbidden. Permission needed
        404:
          description: not found
        500:
          description: internal server error
    delete:
      tags:
        - Admin
      summary: Super admin endpoint for deleting a user
      description: delete a user
      parameters:
      - name: userId
        in: path
        description: ID of user to fetch
        required: true
        schema:
          type: string
          format: uuid
      responses:
        403:
          description: Forbidden. Permission needed
        404:
          description: not found
        500:
          description: internal server error
  
  /notifications:
    get:
      tags:
        - Notification
      summary: get all notification of the login user
      security:
      - ApiKeyAuth: []
      responses:
        200:
          description: array of notification object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
        500:
          description: internal server error 
  /novels:
    post:
      tags:
        - Novels
      summary: Creates a new novel
      security:
      - token: []
      requestBody:
        description: fields containing novel data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NovelInput'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NovelInput'
        required: true
      responses:
        201:
          description: novel created successfully
        401:
          description: Authentication failed
        403:
          description: you need permission
        409:
          description: resource already exists
        500:
          description: internal server error
    get:
      tags:
        - Novels
      summary: fetches novels with pagination and filters
      description: fetches novels from the database with pagination and filters
      parameters:
        - name: page
          in: query
          schema:
            type: integer
        - name: limit
          in: query
          schema:
            type: integer
        - name: title
          in: query
          schema:
            type: string
        - name: author
          in: query
          schema:
            type: string
        - name: genre
          in: query
          schema:
            type: string
        - name: keyword
          in: query
          schema:
            type: string
      responses:
        200:
          description: succesfully fetched novels
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: succesfully returned novels
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        title:
                          type: string
                          example: We Are Here Again
                        slug:
                          type: string
                          example: we-are-here-again
                        author:
                          type: string
                          example: Eden Hazard
                        genre:
                          type: string
                          example: action
                        description:
                          type: string
                          example: Reminder of our presence again
                        body:
                          type: string
                          example: Lorem ipsum dolor sit amet, consectetur adipiscing elit
                        createdAt:
                          type: string
                          example: '2019-08-07T00:53:02.535Z'
                        updatedAt:
                          type: string
                          example: '2019-08-07T00:53:02.535Z'
        400:
          description: bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        field:
                          type: string
                          example: page
                        message:
                          type: string
                          example: page cannot be empty
        401:
          description: unauthorized access
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: invalid token
        404:
          description: entity not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: page not found
        500:
          description: server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: error occured
  /novels/{slug}:
    patch:
      tags:
        - Novels
      summary: Update novel
      parameters:
      - name: "slug"
        in: "path"
        description: "slug of novel being updated"
        required: true
        schema:
          $ref: '#/components/schemas/novelId'
      security:
      - token: []
      requestBody:
        description: fields containing novel data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NovelInput'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NovelInput'
        required: true
      responses:
        200:
          description: novel updated successfully
        401:
          description: Authentication failed
        403:
          description: you need permission
        404:
          description: Novel not found
        500:
          description: internal server error
    delete:
      tags:
        - Novels
      summary: Update novel
      parameters:
      - name: "slug"
        in: "path"
        description: "slug of novel being updated"
        required: true
        schema:
          $ref: '#/components/schemas/novelId'
      security:
      - token: []
      responses:
        200:
          description: novel deleted successfully
        401:
          description: Authentication failed
        403:
          description: you need permission
        404:
          description: Novel not found
        500:
          description: internal server error
  /novels/{slug}/like:
    post:
      tags:
        - Novels
      summary: Likes or Unlikes a novel
      security:
      - token: []  
      parameters:
      - name: "slug"
        in: "path"
        description: "slug of novel being rated"
        required: true
        schema:
          $ref: '#/components/schemas/novelId'
          
      responses:
        201:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/successfulRating"
        401:
          description: "Invalid token, token does not exist"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/invalidTokenResponse"
                
        400:
          description: "invalid novelId or userId"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/invalidParameterResponse"
        404:
          description: "user or novel not fround"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notFoundResponse"
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardServerResponse'   
      security:
      - token: []                   
  /genres:
    post:
      tags:
        - Novels
      summary: Creates a genre
      requestBody:
        description: fields containing novel data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenreInput'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/GenreInput'
        required: true
      responses:
        201:
          description: genre successfully created
        401:
          description: Authentication failed
        409:
          description: resource already exists
        500:
          description: internal server error                  
  /auth/login:
    post:
      tags:
        - Auth
      summary: Login an existing user with email
      requestBody:
        description: fields containing user login data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginInput'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserLoginInput'
        required: true
      responses:
        200:
          description: user login successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        400:
          description: bad input parameter
        409:
          description: resource already exists
        500:
          description: internal server error           
  /auth/register:
    post:
      tags:
        - Auth
      summary: Registers a new user
      requestBody:
        description: fields containing user data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegisterInput'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRegisterInput'
        required: true
      responses:
        201:
          description: user created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        400:
          description: bad input parameter
          content:
            application/json:
              schema:
                type: object
                properties: 
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        field:
                          type: string
                          example: email
                        message:
                          type: string
                          example: the email address you supplied is invalid
        409:
          description: resource already exists
        500:
          description: internal server error 
    get:
      tags:
        - Users
      summary: Gets all users
      responses:
        200:
          description: request successful
        401:
          description: Authentication failed
      security:
      - token: [] 
  /auth/verify/{token}:
    patch:
      tags:
      - Users
      summary: "Verifies user account"
      description: "Verifies user account"
      parameters:
      - name: "token"
        in: "path"
        description: "Token sent to email of user to be verified."
        required: true
        schema:
          $ref: '#/components/schemas/token'
          
      - name: "id"
        in: "path"
        description: "ID of user to be verified."
        required: true
        schema:
          $ref: '#/components/schemas/token'
          
          
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/veriryUserSuccess"
        401:
          description: "Invalid token, User with ID does not exist, Token does not exit in the database"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/verifyUserFailure1"
                
        400:
          description: "Already verified user"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/verifyUserFailure2"
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardServerResponse'                   
  /auth/forgotpassword:
    post:
      tags:
        - Auth
      summary: Forgot password
      description: Sends an email to a user with the reset password link
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        200:
          description: successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardServerResponse'
        404:
          description: user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardServerResponse'
        500:
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardServerResponse'
  /auth/changepassword:
    post:
      summary: Change password
      description: Allows an authenticated user to change their password
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                currentPassword:
                  type: string
                newPassword:
                  type: string
      responses:
        201:
          description: succesful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: object
                    example: successfully changed password
        400:
          description: bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        field:
                          type: string
                          example: currentPassword
                        message:
                          type: string
                          example: currentPassword is a required field
        401:
          description: unauthorized access
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: invalid token
        403:
          description: forbidden access
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: wrong password
        404:
          description: entity not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: user not found
        409:
          description: conflict error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: new password cannot be the same as current password
        500:
          description: server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: error occured
  /novels/{slug}/comments:
    post:
      summary: Creates a comment
      description: Post a comment on a novel
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                commentBody:
                  type: string
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
      responses:
        201:
          description: succesful request, entity created
          content:
            application/json:
              schema:
                type: object
                properties:
                  comment:
                    type: object
                    properties:
                      novel:
                        type: string
                        example: The Good Book
                      commenter:
                        type: string
                        example: bigShaq004
                      commentBody:
                        type: string
                        example: I really love this book
                      updatedAt:
                        type: string
                        example: '2019-08-05T14:17:58.518Z'
        400:
          description: bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        field:
                          type: string
                          example: commentBody
                        message:
                          type: string
                          example: commentBody cannot be empty
        401:
          description: unauthorized access
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: invalid token
        403:
          description: forbidden access
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: you have to be subscribed to comment on a novel
        404:
          description: entity not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: novel not found
        500:
          description: server error
  /novels/{slug}/comments:
    get:
      summary: Gets all comments
      description: Gets all comments
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  comments:
                    type: object
                    properties:
                      novel:
                        type: string
                        example: The Good Book
                      commentAuthor:
                        type: string
                        example: bigShaq004
                      commentBody:
                        type: string
                        example: I really love this book
                      updatedAt:
                        type: string
                        example: '2019-08-05T14:17:58.518Z'
        400:
          description: bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        field:
                          type: string
                          example: commentBody
                        message:
                          type: string
                          example: commentBody cannot be empty
        401:
          description: unauthorized access
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: invalid token
        403:
          description: forbidden access
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: you have to be subscribed to comment on a novel
        404:
          description: entity not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: novel not found
        500:
          description: server error
  '/profiles/{userId}':
    get:
      tags:
        - Users
      summary: View a user profile.
      security:
      - ApiKeyAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            example: '0ce36391-2c08-4703-bddb-a4ea8cccbbc5'
      responses:
        200:
          description: profile details of user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Profile'
        404:
          description: user not found
          content:
            application/json:
              schema:
                type: object
                properties: 
                  error:
                    type: object
                    properties:
                      message:
                          type: string
                          example: 'user not found'
  /novels/{commentId}/like:
    post:
      summary: Creates a comment
      description: Post a comment on a novel
      parameters:
        - name: commentId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: succesful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: you've successfully liked comment
        401:
          description: unauthorized access
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: invalid token
        403:
          description: forbidden access
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: you have to be subscribed to like a comment
        404:
          description: entity not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: comment not found
        500:
          description: server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: error occured
  /novels/{slug}/comments/{parentId}:
    post:
      summary: Creates a reply
      description: Reply a parent comment
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                commentBody:
                  type: string
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: parentId
          in: path
          required: true
          schema:
            type: integer
      responses:
        201:
          description: succesful request, entity created
          content:
            application/json:
              schema:
                type: object
                properties:
                  reply:
                    type: object
                    properties:
                      novel:
                        type: string
                        example: The Good Book
                      parentComment:
                        type: string
                        example: this book is really nice
                      replier:
                        type: string
                        example: I really love this book
                      replyBody:
                        type: string
                        example: yeah I think so too
                      updatedAt:
                        type: string
                        example: '2019-08-05T14:17:58.518Z'
        400:
          description: bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        field:
                          type: string
                          example: commentBody
                        message:
                          type: string
                          example: commentBody cannot be empty
        401:
          description: unauthorized access
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: invalid token
        403:
          description: forbidden access
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: you have to be subscribed to comment on a novel
        404:
          description: entity not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: no comment found with the provided id
  /novels/{slug}/report:
    post:
      summary: Report a novel
      description: Replort a novel that violates the terms and condition of the house
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                body:
                  type: string
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
      responses:
        201:
          description: succesfully reported an article
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: report was created successfully
        400:
          description: bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        field:
                          type: string
                          example: body
                        message:
                          type: string
                          example: body cannot be empty
        401:
          description: unauthorized access
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: invalid token
        404:
          description: entity not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: novel not found
  /auth/passwordreset:
    post:
      summary: reset password
      description: reset forgotten password
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                newPassword:
                  type: string
      responses:
        200:
          description: succesful request, entity changed
          content:
            application/json:
              schema:
                type: object
                properties:
                  reply:
                    type: object
                    properties:
                      message:
                        type: string
                        example: successfully change password
        400:
          description: bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        field:
                          type: string
                          example: newPassword
                        message:
                          type: string
                          example: newPassword cannot be empty
        401:
          description: unauthorized access
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: invalid token
        403:
          description: forbidden access
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: you have to be verified to like a comment on a novel
        404:
          description: entity not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: no comment found with the provided id

  '/profiles':
    patch:
      tags:
        - Users
      summary: Updates a user profile
      security:
      - ApiKeyAuth: []
      requestBody:
        description: fields containing user data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfileInput'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserProfileInput'
        required: false
      responses:
        200:
          description: profile successfully updated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Profile'
        400:
          description: invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardServerResponse'
        404:
          description: user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardServerResponse'
        409:
          description: email already exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardServerResponse'
        500:
          description: server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: error occured
  /novels/{slug}/comments/{commentId}:
    patch:
      tags:
      - Comments
      summary: Edit comment
      description: Edit comment
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                commentBody:
                  type: string
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: commentId
          in: path
          required: true
          schema:
            type: integer
      responses:
        201:
          description: succesful request, edited
          content:
            application/json:
              schema:
                type: object
                properties:
                      updatedAt:
                        type: string
                        example: '2019-08-05T14:17:58.518Z'
        400:
          description: bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        field:
                          type: string
                          example: commentBody
                        message:
                          type: string
                          example: commentBody cannot be empty
        401:
          description: unauthorized access
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: invalid token
        403:
          description: forbidden access
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: you have to be subscribed to edit a comment
        404:
          description: entity not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: no comment found with the provided id
    get:
      tags:
      - Comments
      summary: Comments edit history
      description: Comment edit history
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
        - name: commentId
          in: path
          required: true
          schema:
            type: integer
      responses:
        201:
          description: succesful request, get comments edit history
          content:
            application/json:
              schema:
                type: object
                properties:
                      updatedAt:
                        type: string
                        example: '2019-08-05T14:17:58.518Z'
        400:
          description: bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        field:
                          type: string
                          example: commentBody
                        message:
                          type: string
                          example: commentBody cannot be empty
        401:
          description: unauthorized access
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: invalid token
        403:
          description: forbidden access
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: you have to be subscribed to edit a comment
        404:
          description: entity not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: no comment found with the provided id

  /auth/logout:
    get:
      tags:
        - Auth
      summary: Logs out a user
      responses:
        200:
          description: Logout was successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Logout was successful
        401:
          description: unauthorised request
        500:
          description: internal server error

  /profiles/{userId}/follow:
    post:
      tags:
        - Users
      summary: Follow a user
      description: Add user to list of followers
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          example: fb94de4d-47ff-4079-89e8-b0186c0a3be8

      responses:
        201:
          description: user followed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        401:
          description: unauthorized access
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: invalid token
        403:
          description: forbidden access
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: string
                    example: you cannot follow yourself
        500:
          description: server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: error occured
    
    delete:
      tags:
        - Users
      summary: Unfollow a user
      description: Remove user from list of followers
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          example: fb94de4d-47ff-4079-89e8-b0186c0a3be8

      responses:
        201:
          description: user followed
          content:
            application/json:
              schema:
                type: string
                example: 'successfully unfollowed'
        401:
          description: unauthorized access
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: invalid token
        403:
          description: forbidden access
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: string
                    example: you cannot follow yourself
        500:
          description: server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: error occured
  /novels/{slug}:
    get:
      tags:
        - Novels
      summary: Get novel
      description: Get single novel with highlights
      security:
      - token: [] 
      responses:
        200:
          description: Request successful
        401:
          description: Authentication failed
        404:
          description: Novel not found
        500:
          description: internal server error  
  /novels/{slug}/highlight:
    post:
      tags:
        - Highlight
      summary: Creates highlight
      description: Post highlighted text
      requestBody:
        description: fields containing novel data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HighlightInput'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/HighlightInput'
        required: true
      security:
      - token: []
      responses:
        201:
          description: Highlight created successfully
        401:
          description: Authentication failed
        404:
          description: Novel not found
        500:
          description: internal server error

  /novels/:novelId/bookmarks:
    post:
      tags:
        - Novels
      summary: Bookmark Novels
      requestBody:
        description: User should be able to bookmark a novel
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NovelInput'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NovelInput'
        required: true
      responses:
        201:
          description: Bookmark Novels
        404:
          description: Not found
        500:
          description: internal server error
          
  /novels/bookmarks:
    get:
      tags:
        - Novels
      summary: Fetch Bookmarks
      requestBody:
        description: Bookmarks fetched successfully
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NovelInput'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NovelInput'
        required: true
      responses:
        201:
          description: Bookmarks fetched successfully
        404:
          description: Not found
        500:
          description: internal server error   
                  
components:
  schemas:
    token:
      type: string
    veriryUserSuccess:
      type: object
      properties:
        message:
          type: string
          example: "You have sucessfully verified your email"
    verifyUserFailure1:
      type: object
      properties:
        error:
          type: string
          example: "Sorry could not verify email"
    verifyUserFailure2:
      type: object
      properties:
        error:
          type: string
          example: "User already verified"
    novelId:
      type: string
    User:
      required:
      - firstName
      - lastName
      - email
      type: object
      properties:
        firstName:
          type: string
          example: john
        lastName:
          type: string
          example: doe
        email:
          type: string
          example: johndoe@email.com
        username:
          type: string
          example: johnnydoe12
        bio:
          type: string
          example: I am awesome
        avatarURL:
          type: string
          example: https://your_avatar.com/your_avatar.jpg
        phoneNo:
          type: string
          example: 2347012345678
        address:
          type: string
          example: 123 Eve's Garden Road, Eden
    UserRegisterInput:
      required:
        - firstName
        - lastName
        - email
        - password
      type: object
      properties:
        firstName:
          type: string
          example: john
        lastName:
          type: string
          example: doe
        email:
          type: string
          example: johndoe@email.com
        password:
          type: string
          example: Flyplanex22
    UserLoginInput:
      properties:
        email:
          type: string
          example: johndoe@email.com
        password:
          type: string
          example: Flyplanex22
    NovelInput:
      required:
        - title
        - description
        - body
        - genre
      type: object
      properties:
        title:
          type: string
          example: Think Big
        description:
          type: string
          example: Learn how to think big
        body:
          type: string
          example: There are five steps to thinking big...
        genre:
          type: string
          example: action
    UserProfileInput:
      type: object
      properties:
        firstName:
          type: string
          example: john
        lastName:
          type: string
          example: doe
        email:
          type: string
          example: johndoe@email.com
        avatarUrl:
          type: string
          example: ''
    GenreInput:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          example: history
    AuthResponse:
      properties:
        token:
          type: string
        id:
          type: integer
        bio:
          type: string
    Notification:
      type: object
      properties: 
        notifications:
          type: array
          items:
            type: object
            properties:
              actor:
                type: string
                example: eden hazard
              message: 
                type: string
                example: created a novel with the title
              novelTitle: 
                type: string
                example: Religion And Spirituality
              novelUrl:
                type: string
                example: /api/v1/novels/1
              createdAt: 
                type: string
                example: 2019-08-07 11:54:44.713+01
    ForgotPasswordUser:
      required:
      - email
      type: object
      properties:
        email:
          type: string
          example: example@gmail.com
    notFoundResponse:
      type: object
      properties:
        errors:
          type: string
          example: user or novel not found
    successfulRating:
      type: object
      properties:
        message:
          type: string
          example: you've successfully liked this novel
    invalidTokenResponse:
      type: object
      properties:
        errors:
          type: string
          example: Unauthorized user
    invalidParameterResponse:
      type: object
      properties:
        errors:
          type: string
          example: invalid operation
    StandardServerResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: internal server error 
    Profile:
      required:
      - id
      - bio
      - image
      - following
      type: object
      properties:
        id:
          type: integer
          example: 1
        bio:
          type: string
          example: I love novels
        image:
          type: string
          example: ''
        following:
          type: boolean
          example: true
    HighlightInput:
      required:
        - startIndex
        - endIndex
      type: object
      properties:
        startIndex:
          type: integer
          example: 1
        endIndex:
          type: integer
          example: 19
        comment:
          type: string
          example: There is a missing exclamation
    SuperAdminCreateInput:
      required:
        - firstName
        - lastName
        - email
        - roleName
      type: object
      properties:
        firstName:
          type: string
          example: john
        lastName:
          type: string
          example: doe
        email:
          type: string
          example: johndoe@email.com
        roleName:
          type: string
          example: author
  
  securitySchemes:
    token:
      type: apiKey
      in: header
      name: authorization   
